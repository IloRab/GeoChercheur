--
-- Database: `geomap`
--

DROP DATABASE IF EXISTS geomap;
CREATE DATABASE geomap;
USE geomap;

DROP TABLE IF EXISTS Client CASCADE;
DROP TABLE IF EXISTS Question CASCADE;
DROP TABLE IF EXISTS Parcours CASCADE;
DROP TABLE IF EXISTS historique CASCADE;
DROP TABLE IF EXISTS ScoreTotal CASCADE;
DROP TABLE IF EXISTS Compose CASCADE;



CREATE TABLE Client(
   idClient INT AUTO_INCREMENT,
   icon VARCHAR(100) NOT NULL,
   pseudo VARCHAR(50) NOT NULL,
   mdp VARCHAR(50) NOT NULL,
   CONSTRAINT PK_Client PRIMARY KEY(idClient),
   CONSTRAINT U_Pseudo UNIQUE(pseudo)
);

CREATE TABLE Question(
   idQuestion INT AUTO_INCREMENT,
   latitude DOUBLE NOT NULL,
   longitude DOUBLE NOT NULL,
   idClient INT,
   CONSTRAINT PK_Question PRIMARY KEY(idQuestion),
   CONSTRAINT FK_Question_Client FOREIGN KEY(idClient) REFERENCES Client(idClient) ON DELETE CASCADE,
   CONSTRAINT U_Latitude_Longitude UNIQUE(latitude, longitude)
);

CREATE TABLE Parcours(
   idParcours INT AUTO_INCREMENT,
   nomParcours VARCHAR(50) NOT NULL,
   idClient INT NOT NULL,
   descriptionParcours TEXT NOT NULL,
   imageP VARCHAR(100) NOT NULL,
   CONSTRAINT PK_Parcours PRIMARY KEY(idParcours),
   CONSTRAINT U_nomparcours UNIQUE(nomParcours),
   CONSTRAINT FK_Parcours_Client FOREIGN KEY(idClient) REFERENCES Client(idClient) ON DELETE CASCADE
);

CREATE TABLE Historique(
   idHistorique INT AUTO_INCREMENT,
   idClient INT,
   idParcours INT,
   score INT NOT NULL,
   dateH DATE NOT NULL,
   CONSTRAINT PK_historique PRIMARY KEY(idHistorique, idClient, idParcours),
   CONSTRAINT FK_historique_Client FOREIGN KEY(idClient) REFERENCES Client(idClient) ON DELETE CASCADE,
   CONSTRAINT FK_historique_Parcours FOREIGN KEY(idParcours) REFERENCES Parcours(idParcours) ON DELETE CASCADE
);

CREATE TABLE ScoreTotal(
   idClient INT,
   idParcours INT,
   scoreTotal INT NOT NULL,
   nbParties INT NOT NULL,
   CONSTRAINT PK_ScoreTotal PRIMARY KEY(idClient, idParcours),
   CONSTRAINT FK_ScoreTotal_Client FOREIGN KEY(idClient) REFERENCES Client(idClient) ON DELETE CASCADE,
   CONSTRAINT FK_ScoreTotal_Parcours FOREIGN KEY(idParcours) REFERENCES Parcours(idParcours) ON DELETE CASCADE
);

CREATE TABLE Compose(
   idQuestion INT,
   idParcours INT,
   CONSTRAINT PK_Compose PRIMARY KEY(idQuestion, idParcours),
   CONSTRAINT FK_Compose_Question FOREIGN KEY(idQuestion) REFERENCES Question(idQuestion) ON DELETE CASCADE,
   CONSTRAINT FK_Compose_Parcours FOREIGN KEY(idParcours) REFERENCES Parcours(idParcours) ON DELETE CASCADE
);


--
-- Procedures
--

DROP PROCEDURE IF EXISTS addClient;
DROP PROCEDURE IF EXISTS addParcours;
DROP PROCEDURE IF EXISTS addQuestion;
DROP PROCEDURE IF EXISTS addQuestionsAParcours;
DROP FUNCTION IF EXISTS getMeilleurScore;
DROP FUNCTION IF EXISTS getScoreMoyen;
DROP PROCEDURE IF EXISTS sauvegarde;
DROP PROCEDURE IF EXISTS addComposition;

DELIMITER $
CREATE PROCEDURE addClient(Pseudo_ VARCHAR(50), Mdp VARCHAR(50), icon_ VARCHAR(100))
BEGIN
   INSERT INTO Client (idClient, pseudo, mdp,icon) VALUES (NULL, Pseudo_, Mdp, icon_);
END $

DELIMITER $
CREATE PROCEDURE addComposition(idQuestion_ INT,idParcours_ INT)
BEGIN
   INSERT INTO Compose(idQuestion,idParcours) VALUES (idQuestion_,idParcours_);
END $

DELIMITER $
CREATE PROCEDURE addQuestion(latitude_ DOUBLE, longitude_ DOUBLE, idClient_ INT)
BEGIN
	INSERT INTO Question (idQuestion,latitude, longitude,idClient) VALUES (NULL, latitude_, longitude_, idClient_);
END $


DELIMITER $
CREATE PROCEDURE addParcours(nom VARCHAR(50), idCreateur INT, descriptionParcours TEXT, imageP VARCHAR(100))
BEGIN
	INSERT INTO Parcours (idParcours, nomParcours, idClient,descriptionParcours,imageP) VALUES (NULL, nom, idCreateur, descriptionParcours,imageP);
END $



DELIMITER $
CREATE FUNCTION  getMeilleurScore(idClient_ INT, idParcours_ INT) 
RETURNS INT 
BEGIN
   DECLARE  score INT;
   SET score = (SELECT IFNULL(MAX(score),0)  FROM historique 
   WHERE idClient = idClient_ and idParcours = idParcours_);
   RETURN score;
END $

DELIMITER $
CREATE FUNCTION  getScoreMoyen(idClient_ INT, idParcours_ INT) 
RETURNS INT 
BEGIN
   DECLARE  score INT;
   SET score = (SELECT IFNULL(AVG(score),0) FROM historique 
   WHERE idClient = idClient_ and idParcours = idParcours_);
   RETURN score;
END $


DELIMITER $
CREATE PROCEDURE sauvegarde(idClient_ INT, idParcours_ INT, score_ INT)
BEGIN
   INSERT INTO historique(idHistorique, idClient, idParcours, score, dateH) VALUES (NULL, idClient_,idParcours_,score_, CURDATE());
END $

--
-- Triggers `client`
--
DELIMITER $$
CREATE TRIGGER `AFTER_AddClient` AFTER INSERT ON `client` FOR EACH ROW INSERT INTO scoretotal(idClient,idParcours,scoretotal,nbParties) SELECT NEW.idClient, idParcours, 0, 0 FROM parcours
$$
DELIMITER ;

--
-- Triggers `historique`
--
DELIMITER $$
CREATE TRIGGER `AFTER_Sauvegarde` AFTER INSERT ON `historique` FOR EACH ROW UPDATE scoretotal
SET scoretotal = scoretotal + NEW.score
WHERE idClient = NEW.idClient AND idParcours = NEW.idParcours
$$
DELIMITER ;


--
-- Triggers `parcours`
--
DELIMITER $$
CREATE TRIGGER `AFTER_AddParcours` AFTER INSERT ON `parcours` FOR EACH ROW INSERT INTO scoretotal SELECT idClient, NEW.idParcours, 0, 0 FROM client
$$
DELIMITER ;



